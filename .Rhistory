install.packages("shiny")
source("~/.active-rstudio-document")
#UI
ui <- fluidPage(
# App title ----
titlePanel("Hello World!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 5,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
runApp()
source("~/R Projects/pagina_web_cuadrados_medios/script.R")
source("~/R Projects/pagina_web_cuadrados_medios/script.R")
runApp()
runApp()
runApp()
source("~/R Projects/pagina_web_cuadrados_medios/cuadrados_medios.R")
datos
resultado
datos
tabla = data.frame(datos)
tabla
source("~/R Projects/pagina_web_cuadrados_medios/cuadrados_medios.R")
datos
shiny::runApp()
df = read.csv(miDF.csv)
df = read.csv("miDF.csv")
df
glimpse(df)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
datos
datos
runApp()
plot(datos)
hist(datos)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
jisq.test.cont=function(x,distribucion=NULL,
nclases=c("sturgess","sqrt","user"),
output=TRUE,
alpha=NULL,
nparam=2,...)
{
if (nclases=="sturgess") {
k=floor(1+3.3*log10(length(x)))
q.distribucion=eval(parse(text=paste("q",distribucion,sep="")))
d.distribucion=eval(parse(text=paste("d",distribucion,sep="")))
q=q.distribucion((1:(k-1))/k,...)
tol=sqrt(.Machine$double.eps)
xbreaks=c(min(x)-tol,q,max(x)+tol)
if (output==TRUE) {
xhist=hist(x,
breaks = xbreaks,
freq=FALSE,
lty=2,border = "grey50",
xlab="Valores del conjunto de datos",
ylab="Frecuencia relativa",
main="Histograma para el conjunto"
,col="skyblue")
curve(d.distribucion(x,...),add=TRUE)
}else {
xhist=hist(x,breaks = xbreaks,plot = FALSE)
}
cat("\nIntervalo de aceptacion para la media\n")
linf=round((1/2+(qnorm((alpha)/2)*(1/sqrt(12*length(x))))),4)
lsup=round((1/2+(qnorm((alpha/2),lower.tail = FALSE)*(1/sqrt(12*length(x))))),4)
int_media=list(Liminf=linf,Promedio=round(mean(x),4),Limsup=lsup)
print(as.data.frame(int_media))
cat("\n")
cat("\nIntervalo de aceptacion para la varianza\n")
linf_var=round(qchisq((alpha/2),df=length(x)-1,lower.tail = TRUE)/(12*(length(x)-1)),4)
lsup_var=round(qchisq((alpha/2),df=length(x)-1,lower.tail = FALSE)/(12*(length(x)-1)),4)
int_varianza=list(Liminf=linf_var,Varianza=var(x),Limsup=lsup_var)
print(as.data.frame(int_varianza))
cat("\n")
O=xhist$counts
E=length(x)/k
dname=deparse(substitute(x))
method="Ji-Cuadrada de Pearson"
estadistico=sum((O-E)^2/E)
names(estadistico)="Estadistico ji-cuadrada"
parametro=k-nparam-1
names(parametro)="Grados de libertad"
peval=round(pchisq(estadistico,df=parametro,lower.tail = FALSE),4)
criterio=list(p_value=peval,DF=parametro,Metodo=method)
print(as.data.frame(criterio))
clases=format(xbreaks)
clases=paste("(",clases[-(k+1)],",",clases[-1],"]",sep="")
resultados=list(Intervalos=clases,Frecuencia_Observada=O,Frecuencia_Esperada=E,Residuales=(O-E)/sqrt(E))
if (output==TRUE){
cat("\nTabla de la Distribución Ji-Cuadrada\n")
print(as.data.frame(resultados))
}
s=x[-length(x)]
r=x[-1]
plot(s,r,pch=19,
xlab="Valores del conjunto de datos",
ylab="Valores del conjunto de datos",
main="Diagrama de dispersion",
sub="Prueba de Aleatoriedad")
} else {
if (nclases=="sqrt"){
k=floor(sqrt(length(x)))
q.distribucion=eval(parse(text=paste("q",distribucion,sep="")))
d.distribucion=eval(parse(text=paste("d",distribucion,sep="")))
q=q.distribucion((1:(k-1))/k,...)
tol=sqrt(.Machine$double.eps)
xbreaks=c(min(x)-tol,q,max(x)+tol)
if (output==TRUE) {
xhist=hist(x,
breaks = xbreaks,
freq=FALSE,
lty=2,
border = "grey50",
xlab="Valores del conjunto de datos",
ylab="Frecuencia relativa",
main="Histograma para el conjunto",
col="skyblue")
curve(d.distribucion(x,...),add=TRUE)
}else {
xhist=hist(x,breaks = xbreaks,plot = FALSE)
}
cat("\nIntervalos de aceptación para la media\n")
linf=round((1/2+(qnorm((alpha)/2)*(1/sqrt(12*length(x))))),4)
lsup=round((1/2+(qnorm((alpha/2),lower.tail = FALSE)*(1/sqrt(12*length(x))))),4)
int_media=list(Liminf=linf,Promedio=round(mean(x),4),Limsup=lsup)
print(as.data.frame(int_media))
cat("\n")
cat("\nIntervalo de aceptacion para la varianza\n")
linf_var=round(qchisq((alpha/2),df=length(x)-1,lower.tail = TRUE)/(12*(length(x)-1)),4)
lsup_var=round(qchisq((alpha/2),df=length(x)-1,lower.tail = FALSE)/(12*(length(x)-1)),4)
int_varianza=list(Liminf=linf_var,Varianza=var(x),Limsup=lsup_var)
print(as.data.frame(int_varianza))
cat("\n")
O=xhist$counts
E=length(x)/k
dname=deparse(substitute(x))
method="Ji-Cuadrada de Pearson"
estadistico=sum((O-E)^2/E)
names(estadistico)="Estadistico ji-cuadrada"
parametro=k-nparam-1
names(parametro)="Grados de libertad"
peval=pchisq(estadistico,df=parametro, lower.tail = FALSE)
criterio=list(p_value=peval,DF=parametro,Metodo=method)
print(as.data.frame(criterio))
clases=format(xbreaks)
clases=paste("(",clases[-(k+1)],",",clases[-1],"]",sep="")
resultados=list(Intervalos=clases,frecuencia_observada=O,frecuencia_esperada=E,residuales=(O-E)/sqrt(E))
if (output==TRUE){
cat("\nTabla de la Distribución Ji-Cuadrada\n")
print(as.data.frame(resultados))
}
s=x[-length(x)]
r=x[-1]
plot(s,r,pch=19,
xlab="Valores del conjunto de datos",
ylab="Valores del conjunto de datos",
main="Diagrama de dispersion",
sub="Prueba de Aleatoriedad")
}else{
k=as.integer(readline(prompt = "Ingresa el número de clases:"))
q.distribucion=eval(parse(text=paste("q",distribucion,sep="")))
d.distribucion=eval(parse(text=paste("d",distribucion,sep="")))
q=q.distribucion((1:(k-1))/k,...)
tol=sqrt(.Machine$double.eps)
xbreaks=c(min(x)-tol,q,max(x)+tol)
if (output==TRUE) {
xhist=hist(x,
breaks = xbreaks,
freq=FALSE,
lty=2,
border = "grey50",
xlab = "Valores del conjunto de datos",
ylab="Frecuencia relativa",
main="Histograma del conjunto",
col="skyblue")
curve(d.distribucion(x,...),add=TRUE)
}else {
xhist=hist(x,breaks = xbreaks,plot = FALSE)
}
cat("\nIntervalos de aceptación para la media\n")
linf=round((1/2+(qnorm((alpha)/2)*(1/sqrt(12*length(x))))),4)
lsup=round((1/2+(qnorm((alpha/2),lower.tail = FALSE)*(1/sqrt(12*length(x))))),4)
int_media=list(Liminf=linf,Promedio=round(mean(x),4),Limsup=lsup)
print(as.data.frame(int_media))
cat("\n")
cat("\nIntervalo de aceptacion para la varianza\n")
linf_var=round(qchisq((alpha/2),df=length(x)-1,lower.tail = TRUE)/(12*(length(x)-1)),4)
lsup_var=round(qchisq((alpha/2),df=length(x)-1,lower.tail = FALSE)/(12*(length(x)-1)),4)
int_varianza=list(Liminf=linf_var,Varianza=var(x),Limsup=lsup_var)
print(as.data.frame(int_varianza))
cat("\n")
O=xhist$counts
E=length(x)/k
dname=deparse(substitute(x))
method="Ji-Cuadrada de Pearson"
estadistico=sum((O-E)^2/E)
names(estadistico)="Estadistico ji-cuadrada"
parametro=k-nparam-1
names(parametro)="Grados de libertad"
peval=pchisq(estadistico,df=parametro, lower.tail = FALSE)
criterio=list(p_value=peval,DF=parametro,Metodo=method)
print(as.data.frame(criterio))
clases=format(xbreaks)
clases=paste("(",clases[-(k+1)],",",clases[-1],"]",sep="")
resultados=list(Intervalos=clases,frecuencia_observada=O,frecuencia_esperada=E,residuales=(O-E)/sqrt(E))
if (output==TRUE){
cat("\nTabla de la Distribución Ji-Cuadrada\n")
print(as.data.frame(resultados))
}
s=x[-length(x)]
r=x[-1]
plot(s,r,pch=19,
xlab="Valores del conjunto de datos",
ylab="Valores del conjunto de datos",
main="Diagrama de dispersion",
sub="Prueba de Aleatoriedad")
}
}
}
shiny::runApp()
runApp()
runApp()
install.packages('rsconnect')
install.packages("rsconnect")
install.packages('rsconnect')
rsconnect::setAccountInfo(name='adrianbl', token='4FEFFA9CF5B4F18761C04CBBDA933ADF', secret='d43sXJir8itookboclbiHDgtQlVRO6J/Sb3D06d9')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('/')
library(rsconnect)
rsconnect::deployApp('C:\Users\BL_98\Documents\R Projects\pagina_web_cuadrados_medios\')
library(rsconnect)
rsconnect::deployApp('C:\Users\BL_98\Documents\R Projects\pagina_web_cuadrados_medios')
library(rsconnect)
rsconnect::deployApp('C:/Users/BL_98/Documents/R Projects/pagina_web_cuadrados_medios')
shiny::runApp()
datos
runApp()
runApp()
hist(datos)
hist(input$datos)
runApp()
runApp()
runApp()
runApp()
runApp()
class(datos)
runApp()
runApp()
as.numeric(datos)
is.numeric(datos)
runApp()
datos = cbind(datos, resultado)
datos
df=as.data.frame(datos)
df
datos = cbind(datos)
df=as.data.frame(datos)
df$resultado
datos
resultado
datos
df=as.data.frame(resultado)
df
runApp()
runApp()
runApp()
runApp()
runApp()
resultado
datos
runApp()
cuadrados.medios(1234,100)
cuadrados.medios
!cuadrados.medios
cuadrados.medios!
cuadrados.medios
cuadrados.medios(10,10)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
cuadrados.medios(1234,10)
cuadrados.medios(134,10)
# valor para convertir en decimal
decim = 10^longitud_semilla
cuadrados.medios(1234,10)
library(cuadrados.medios)
cuadrados.medios(1234,10)
library(cuadrados.medios)
cuadrados.medios(1234,10)
library(cuadrados.medios)
cuadrados.medios(1234,10)
shiny::runApp()
shiny::runApp()
runApp()
rsconnect::setAccountInfo(name='adrianbl', token='4FEFFA9CF5B4F18761C04CBBDA933ADF', secret='d43sXJir8itookboclbiHDgtQlVRO6J/Sb3D06d9')
library(rsconnect)
rsconnect::deployApp('C:\Users\BL_98\Documents\R Projects\cuadrados_medios')
library(rsconnect)
rsconnect::deployApp('C:/Users/BL_98/Documents/R Projects/cuadrados_medios')
runApp()
shiny::runApp()
runApp()
cuadrados.medios(1234,10)
x = cuadrados.medios(1234,10)
x
is.numeric(x)
runApp()
runApp()
shiny::runApp()
runApp()
curve(d.distribucion(x,...),add=TRUE)
if (output==TRUE) {
xhist=hist(x,
breaks = xbreaks,
freq=FALSE,
lty=2,border = "grey50",
xlab="Valores del conjunto de datos",
ylab="Frecuencia relativa",
main="Histograma para el conjunto"
,col="skyblue")
curve(d.distribucion(x,...),add=TRUE)
}else {
xhist=hist(x,breaks = xbreaks,plot = FALSE)
}
source("~/R Projects/cuadrados_medios/script.R")
datos
runApp()
datos
source("~/R Projects/cuadrados_medios/script.R")
x = cuadrados.medios(1792,50)
jisq.test.cont(x,NULL,"sturgess",TRUE,NULL,2)
jisq.test.cont(x, distribucion = "unif","sturgess",output = TRUE, alpha = 0.05, nparam = 2, 0, 1)
runApp()
runApp()
datos = cuadrados.medios(1234,10)
datos
x <- datos[, -1]
x
# Borrar la primera y la tercera columna
x <- datos[, -c(1)]
x
# Borrar la primera y la tercera columna
x <- datos[, -c(1,3)]
x
is.numeric(x)
library(cuadrados.medios)
cuadrados.medios(1234,10)
shiny::runApp()
runApp()
datos()
datos
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
datos()
runApp()
shiny::runApp()
